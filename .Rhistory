train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
count.matrix <- count.matrix[,train.ids]
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
your.wd <- "/home/jinyunfan/Documents/bioinfo/exRNA/ez-prediction"
knitr::opts_knit$set(root.dir = your.wd)
library(glmnet)
library(pROC)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
your.wd <- "/home/jinyunfan/Documents/bioinfo/exRNA/ez-prediction"
knitr::opts_knit$set(root.dir = your.wd)
count.path <- "data/TCGA-CRC-counts.txt"
count.matrix <- read.table(count.path, header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
count.matrix <- as.matrix(count.matrix)
sample.ids <- colnames(count.matrix)
tissue.types <- rep("normal",length(sample.ids))
tissue.types[grep("01A$",sample.ids)] <- "tumor"
sample.info <- cbind(sample.ids,tissue.types)
tissue.types <- factor(tissue.types,level=c("tumor","normal"))
write.table(sample.info,"metadata/sample.info.txt",sep="\t",quote=FALSE,row.names = F)
library(edgeR)
y <- edgeR::DGEList(counts=count.matrix)
keep <- edgeR::filterByExpr(y,group = tissue.types)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- edgeR::calcNormFactors(y,method="TMM")
log.cpm <- cpm(y,log = TRUE)
plotMDS(log.cpm,labels=tissue.types)
write.table(round(log.cpm,3),"output/processed/log.cpm.txt",sep="\t",quote=FALSE)
log.cpm <- as.matrix(t(log.cpm)) # columns for genes, row for samples
log.cpm.scaled <- scale(log.cpm)
#col.std <- apply(log.cpm, 2, sd) # check standard deviation of each gene, should equals to 1
#col.mean <- apply(log.cpm, 2, mean) # check mean log cpm of each gene, should very close to 0
write.table(round(t(log.cpm.scaled,3)),"output/processed/log.cpm.scaled.txt",sep="\t",quote=FALSE)
library(edgeR)
y <- edgeR::DGEList(counts=count.matrix)
keep <- edgeR::filterByExpr(y,group = tissue.types)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- edgeR::calcNormFactors(y,method="TMM")
log.cpm <- cpm(y,log = TRUE)
log.cpm <- as.matrix(t(log.cpm)) # columns for genes, row for samples
log.cpm.scaled <- scale(log.cpm)
#col.std <- apply(log.cpm, 2, sd) # check standard deviation of each gene, should equals to 1
#col.mean <- apply(log.cpm, 2, mean) # check mean log cpm of each gene, should very close to 0
write.table(round(t(log.cpm.scaled),3),"output/processed/log.cpm.scaled.txt",sep="\t",quote=FALSE)
library(glmnet)
library(pROC)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
your.wd <- "/home/jinyunfan/Documents/bioinfo/exRNA/ez-prediction"
knitr::opts_knit$set(root.dir = your.wd)
library(glmnet)
library(pROC)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
exp.mat <- exp.mat[,train.ids]
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
exp.mat
as.integer(labels)
as.integer(labels) - 1
exp.mat
t(exp.mat)
exp.mat[1:10,1:10]
for(i in 1:10){
print(i)
}
for(i in length(labels)){
print(i)
}
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- exp.mat[,train.ids]
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
selected.features
rownames(selected.features)
library(edgeR)
y <- edgeR::DGEList(counts=count.matrix)
keep <- edgeR::filterByExpr(y,group = labels)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- edgeR::calcNormFactors(y,method="TMM")
design <- model.matrix(~labels)
y <- estimateDisp(y, design)
your.wd <- "/home/jinyunfan/Documents/bioinfo/exRNA/ez-prediction"
knitr::opts_knit$set(root.dir = your.wd)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
count.path <- "data/TCGA-CRC-counts.txt"
count.matrix <- read.table(count.path, header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
count.matrix <- as.matrix(count.matrix)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
count.matrix <- count.matrix[,train.ids]
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
library(edgeR)
y <- edgeR::DGEList(counts=count.matrix)
keep <- edgeR::filterByExpr(y,group = labels)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- edgeR::calcNormFactors(y,method="TMM")
design <- model.matrix(~labels)
y <- estimateDisp(y, design)
fit.ql <- glmQLFit(y, design)
tumor.vs.normal.ql <- glmQLFTest(fit.ql, coef=2)
tumor.vs.normal.de.top50 <- topTags(tumor.vs.normal.ql,n=50)
write.table(tumor.vs.normal.de.top50,"output/features/de.train.top50.txt",sep="\t",quote=FALSE)
your.wd <- "/home/jinyunfan/Documents/bioinfo/exRNA/ez-prediction"
knitr::opts_knit$set(root.dir = your.wd)
library(glmnet)
library(pROC)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- exp.mat[,train.ids]
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
selected.features
rownames(selected.features )
feature.ids <- rownames(selected.features)
your.wd <- "/home/jinyunfan/Documents/bioinfo/exRNA/ez-prediction"
knitr::opts_knit$set(root.dir = your.wd)
library(glmnet)
library(pROC)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
exp.mat <- exp.mat[feature.ids,train.ids]
exp.mat <- t(as.matrix(exp.mat))
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
labels
as.integer(labels)
as.integer(labels) - 1
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
exp.mat <- exp.mat[feature.ids,train.ids]
exp.mat <- t(as.matrix(exp.mat))
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
labels <- as.integer(labels) - 1
exp.mat
cv.glmnet(exp.mat,labels,type.measure="auc",nfolds = length(labels))
help(cv.glmnet)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
exp.mat <- exp.mat[feature.ids,train.ids]
exp.mat <- t(as.matrix(exp.mat))
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
#labels <- as.integer(labels) - 1
cv.result <- cv.glmnet(exp.mat,labels,type.measure="auc",nfolds = length(labels))
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
exp.mat <- exp.mat[feature.ids,train.ids]
exp.mat <- t(as.matrix(exp.mat))
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
labels <- as.integer(labels) - 1
cv.result <- cv.glmnet(exp.mat,labels,type.measure="auc",nfolds = length(labels))
cv.result
cv.result$lambda
cv.result$lambda
cv.result$cvm
cv.result$lambda.min
cv.result$cvm
cv.result$lambda.min
plot(cv.result$lambda,cv.result$cvm)
your.wd <- "/home/jinyunfan/Documents/bioinfo/exRNA/ez-prediction"
knitr::opts_knit$set(root.dir = your.wd)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
test.ids <- rownames(sample.info)[sample.info$dataset=="test"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
train.exp.mat <- as.matrix(t(exp.mat[feature.ids,train.ids]))
test.exp.mat <- as.matrix(t(exp.mat[feature.ids,test.ids]))
test.labels <- sample.info[test.ids,"tissue.types"]
train.labels <- sample.info[train.ids,"tissue.types"]
test.labels <- factor(test.labels,level=c("normal","tumor"))
train.labels <- factor(train.labels,level=c("normal","tumor"))
test.labels <- as.integer(test.labels) - 1
train.labels <- as.integer(train.labels) - 1
train.labels
test.labels
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
test.ids <- rownames(sample.info)[sample.info$dataset=="test"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
train.exp.mat <- as.matrix(t(exp.mat[feature.ids,train.ids]))
test.exp.mat <- as.matrix(t(exp.mat[feature.ids,test.ids]))
test.labels <- sample.info[test.ids,"tissue.types"]
test.labels <- factor(test.labels,level=c("normal","tumor"))
test.labels <- as.integer(test.labels) - 1
train.labels <- sample.info[train.ids,"tissue.types"]
train.labels <- factor(train.labels,level=c("normal","tumor"))
train.labels <- as.integer(train.labels) - 1
library(glmnet)
library(pROC)
help(cv.glmnet)
help(glmnet)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
exp.mat <- exp.mat[feature.ids,train.ids]
exp.mat <- t(as.matrix(exp.mat))
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
labels <- as.integer(labels) - 1
cv.result <- cv.glmnet(exp.mat,labels,family="binomial",type.measure="auc",nfolds = length(labels))
plot(cv.result$lambda,cv.result$cvm)
cv.result$lambda.min
cv.result <- cv.glmnet(exp.mat,labels,family="binomial",type.measure="auc",nfolds = 4)
plot(cv.result$lambda,cv.result$cvm)
cv.result$lambda.min
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
exp.mat <- exp.mat[feature.ids,train.ids]
exp.mat <- t(as.matrix(exp.mat))
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
labels <- as.integer(labels) - 1
cv.result <- cv.glmnet(exp.mat,labels,family="binomial",type.measure="auc",nfolds = 2)
cv.result <- cv.glmnet(exp.mat,labels,family="binomial",type.measure="auc",nfolds = 10)
plot(cv.result$lambda,cv.result$cvm)
cv.result$lambda.min
library(glmnet)
library(glmnet)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
exp.mat <- exp.mat[feature.ids,train.ids]
exp.mat <- t(as.matrix(exp.mat))
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
labels <- as.integer(labels) - 1
cv.result <- cv.glmnet(exp.mat,labels,family="binomial",nfolds = length(labels))
plot(cv.result$lambda,cv.result$cvm)
cv.result$lambda.min
library(glmnet)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
#exp.mat <- exp.mat[feature.ids,train.ids]
exp.mat <- exp.mat[,train.ids]
exp.mat <- t(as.matrix(exp.mat))
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
labels <- as.integer(labels) - 1
cv.result <- cv.glmnet(exp.mat,labels,family="binomial",nfolds = length(labels))
plot(cv.result$lambda,cv.result$cvm)
cv.result$lambda.min
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
exp.mat <- exp.mat[feature.ids,train.ids]
exp.mat <- t(as.matrix(exp.mat))
labels <- sample.info[train.ids,"tissue.types"]
labels <- factor(labels,level=c("normal","tumor"))
labels <- as.integer(labels) - 1
cv.result <- cv.glmnet(exp.mat,labels,family="binomial",nfolds = length(labels))
plot(cv.result$lambda,cv.result$cvm)
cv.result$lambda.min
glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted(test.exp.mat)
model.fitted$call(test.exp.mat)
predict(model.fitted,newx=test.exp.mat, type="response")
help(predict)
predict(model.fitted,newx=test.exp.mat)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels, pred.proba)
test.labels
pred.proba
as.numeric(pred.proba)
roc.curve <- roc(test.labels,as.numeric(pred.proba))
plot(roc.curve)
help(plot)
plot(roc.curve,print.thres="best", print.thres.best.method="youden")
auc(roc.curve)
par(mar = c(4, 4, 4, 4)+.1)
auc(roc.curve)
plot(roc.curve,print.thres="best", print.thres.best.method="youden")
plot(roc.curve,print.thres="best", print.thres.best.method="youden",percent = TRUE)
plot(roc.curve,,percent = TRUE)
plot(roc.curve,percent = TRUE)
ci.auc(roc.curve,x="best",conf.level = 0.95,best.method="closest.topleft")
warnings()
ci.auc(roc.curve,x="best",conf.level = 0.95,best.method="closest.topleft")
ci.auc(roc.curve,x="best",conf.level = 0.95,best.method="closest.topleft")
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.5)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
ci.auc(roc.curve,x="best",conf.level = 0.95,best.method="closest.topleft")
pred.proba
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.5)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95,best.method="closest.topleft")
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.1)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95,best.method="closest.topleft")
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.2)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95,best.method="closest.topleft")
pred.proba
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.2)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95,best.method="closest.topleft")
roc.curve
plot(roc.curve)
your.wd <- "/home/jinyunfan/Documents/bioinfo/exRNA/ez-prediction"
knitr::opts_knit$set(root.dir = your.wd)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
test.ids <- rownames(sample.info)[sample.info$dataset=="test"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
train.exp.mat <- as.matrix(t(exp.mat[feature.ids,train.ids]))
test.exp.mat <- as.matrix(t(exp.mat[feature.ids,test.ids]))
test.labels <- sample.info[test.ids,"tissue.types"]
test.labels <- factor(test.labels,level=c("normal","tumor"))
test.labels <- as.integer(test.labels) - 1
train.labels <- sample.info[train.ids,"tissue.types"]
train.labels <- factor(train.labels,level=c("normal","tumor"))
train.labels <- as.integer(train.labels) - 1
library(glmnet)
library(pROC)
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.2)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95,best.method="closest.topleft")
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.2)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
#roc.curve <- roc(test.labels,as.numeric(pred.proba))
#ci.auc(roc.curve,x="best",conf.level = 0.95,best.method="closest.topleft")
pred.proba
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.6)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
#roc.curve <- roc(test.labels,as.numeric(pred.proba))
#ci.auc(roc.curve,x="best",conf.level = 0.95,best.method="closest.topleft")
pred.proba
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.6)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95)
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.1)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95)
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.05)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95)
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.4)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95)
test.labels
as.numeric(pred.proba)
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.4)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95)
par(mar = c(4, 4, 4, 4)+.1)
plot(roc.curve)
roc.curve$sensitivities
roc.curve$specificities
plot(1-roc.curve$sensitivities,roc.curve$sensitivities)
plot(1-roc.curve$specificities,roc.curve$sensitivities)
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.4)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95)
plot(1-roc.curve$specificities,roc.curve$sensitivities)
library(edgeR)
y <- edgeR::DGEList(counts=count.matrix)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
test.ids <- rownames(sample.info)[sample.info$dataset=="test"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
feature.ids <- feature.ids[length(feature.ids)-50:length(feature.ids)]
train.exp.mat <- as.matrix(t(exp.mat[feature.ids,train.ids]))
feature.ids
feature.ids[length(feature.ids)-50:length(feature.ids)]
feature.ids[10000:10050]
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
test.ids <- rownames(sample.info)[sample.info$dataset=="test"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
feature.ids <- feature.ids[feature.ids[10000:10050]]
train.exp.mat <- as.matrix(t(exp.mat[feature.ids,train.ids]))
dim(exp.mat)
exp.mat[feature.ids,train.ids]
rownames(exp.mat)
exp.mat[feature.ids,]
exp.mat[,feature.ids]
rownames(exp.mat)[1:10]
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
test.ids <- rownames(sample.info)[sample.info$dataset=="test"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(exp.mat)[1:10]
train.exp.mat <- as.matrix(t(exp.mat[feature.ids,train.ids]))
test.exp.mat <- as.matrix(t(exp.mat[feature.ids,test.ids]))
test.labels <- sample.info[test.ids,"tissue.types"]
test.labels <- factor(test.labels,level=c("normal","tumor"))
test.labels <- as.integer(test.labels) - 1
train.labels <- sample.info[train.ids,"tissue.types"]
train.labels <- factor(train.labels,level=c("normal","tumor"))
train.labels <- as.integer(train.labels) - 1
library(glmnet)
library(pROC)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.4)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95)
plot(1-roc.curve$specificities,roc.curve$sensitivities)
your.wd <- "/home/jinyunfan/Documents/bioinfo/exRNA/ez-prediction"
knitr::opts_knit$set(root.dir = your.wd)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
test.ids <- rownames(sample.info)[sample.info$dataset=="test"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- selected.features[1:50]
selected.features
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
test.ids <- rownames(sample.info)[sample.info$dataset=="test"]
selected.features <- read.table("output/features/de.train.top50.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)[1:50]
library(glmnet)
library(pROC)
model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.00488671)
#model.fitted <- glmnet(train.exp.mat,train.labels,family="binomial",lambda = 0.4)
pred.proba <- predict(model.fitted,newx=test.exp.mat, type="response")
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95)
plot(1-roc.curve$specificities,roc.curve$sensitivities)
