help(cv.glmnet)
library(glmnet)
help(cv.glmnet)
help("glmnet")
2^(-2:2)/50
help(tune.svm)
library(e1071)
help(tune.svm)
help(tune.svm)
your.wd <- "/home/jinyunfan/Documents/bioinfo/exRNA/ez-prediction"
knitr::opts_knit$set(root.dir = your.wd)
library(e1071)
# search space of gamma: 2^(-1:1)/50, 1/(data dimension) by default
# search space of cost: 2^(-1:1), 1 by default
gamma <- 2^(-2:2)/50
cost <- 2^(-2:2)
cv.svm.results <- tune.svm(train.exp.mat,train.labels,gamma = gamma, cost = cost ,probability = TRUE)
your.wd <- "/home/jinyunfan/Documents/bioinfo/exRNA/ez-prediction"
knitr::opts_knit$set(root.dir = your.wd)
sample.info <- read.table("metadata/dataset.split.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- read.table("output/processed/log.cpm.scaled.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
exp.mat <- as.matrix(exp.mat)
train.ids <- rownames(sample.info)[sample.info$dataset=="train"]
test.ids <- rownames(sample.info)[sample.info$dataset=="test"]
selected.features <- read.table("output/features/de.train.txt", header = T, sep ="\t",row.names=1,stringsAsFactors = F,check.names = F)
feature.ids <- rownames(selected.features)
n.features <- length(feature.ids)
feature.ids <- feature.ids[1:50]
train.exp.mat <- as.matrix(t(exp.mat[feature.ids,train.ids]))
test.exp.mat <- as.matrix(t(exp.mat[feature.ids,test.ids]))
# If you set stringsAsFactors = F in read.table function, the response variable in `sample.info` is not of factor type
train.labels <- sample.info[train.ids,"tissue.types"]
train.labels <- factor(train.labels,level=c("normal","tumor"))
test.labels <- sample.info[test.ids,"tissue.types"]
test.labels <- factor(test.labels,level=c("normal","tumor"))
library(e1071)
# search space of gamma: 2^(-1:1)/50, 1/(data dimension) by default
# search space of cost: 2^(-1:1), 1 by default
gamma <- 2^(-2:2)/50
cost <- 2^(-2:2)
cv.svm.results <- tune.svm(train.exp.mat,train.labels,gamma = gamma, cost = cost ,probability = TRUE)
cv.svm.results$best.parameters
# Perform prediction using best model
pred.proba <- predict(cv.svm.results$best.model,newdata=test.exp.mat,probability = TRUE)
# Evaluate performance
roc.curve <- roc(test.labels,as.numeric(pred.proba))
library(glmnet)
library(pROC)
library(e1071)
# search space of gamma: 2^(-1:1)/50, 1/(data dimension) by default
# search space of cost: 2^(-1:1), 1 by default
gamma <- 2^(-2:2)/50
cost <- 2^(-2:2)
cv.svm.results <- tune.svm(train.exp.mat,train.labels,gamma = gamma, cost = cost ,probability = TRUE)
cv.svm.results$best.parameters
# Perform prediction using best model
pred.proba <- predict(cv.svm.results$best.model,newdata=test.exp.mat,probability = TRUE)
# Evaluate performance
roc.curve <- roc(test.labels,as.numeric(pred.proba))
ci.auc(roc.curve,x="best",conf.level = 0.95)
plot(1-roc.curve$specificities,roc.curve$sensitivities,type="l")
ci.coords(roc.curve,x="best",conf.level = 0.95,ret = c("recall","precision"))
cv.svm.results
cv.svm.results$train.ind
length(cv.svm.results$train.ind)
cv.svm.results$train.ind$`(0.979,3.1]`
length(cv.svm.results$train.ind$`(0.979,3.1]`)
length(train.labels)
help(tune.randomForest)
help(tune.randomForest)
rf.model.tuning <- tune.randomForest(train.exp.mat,train.labels,ntree=c(5,25,100))
library(randomForest)
rf.model.tuning <- tune.randomForest(train.exp.mat,train.labels,ntree=c(5,25,100))
rf.model.tuning$best.parameters
help("randomForest")
